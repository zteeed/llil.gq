/*
 * URL Shortener API
 *
 * This is an URL Shortener API
 *
 * API version: 1.0.0
 * Contact: aurelien@duboc.xyz
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"crypto/sha1"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/go-pg/pg/v10"
	"net/http"
	"net/url"
	"strings"
)

func removeCharacters(input string, characters string) string {
	filter := func(r rune) rune {
		if strings.IndexRune(characters, r) < 0 {
			return r
		}
		return -1
	}
	return strings.Map(filter, input)
}

func computeShortURL(LongURL string) string {
	hash := sha1.New()
	hash.Write([]byte(LongURL))
	hashBase64 := base64.StdEncoding.EncodeToString(hash.Sum(nil))
	hashBase64Stripped := removeCharacters(hashBase64, "+/=")
	return hashBase64Stripped[:7]
}

type CreateNewShortURL struct {
	db      *pg.DB
	baseUrl string
}

func (h *CreateNewShortURL) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if r.Method != "POST" {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}
	decoder := json.NewDecoder(r.Body)
	var data longUrlPayload
	err := decoder.Decode(&data)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	_, err = url.ParseRequestURI(data.LongURL)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	fmt.Println(data.LongURL)
	shortURL := computeShortURL(data.LongURL)
	fmt.Println(h.baseUrl + "/" + shortURL)
	w.WriteHeader(http.StatusCreated)
}

type ReturnLongURL struct {
	db      *pg.DB
	baseUrl string
}

func (h *ReturnLongURL) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if r.Method != "GET" {
		w.WriteHeader(http.StatusMethodNotAllowed)
		return
	}
	w.WriteHeader(http.StatusOK)
}
